# Prevent reactive security auto-configuration (we use servlet/Tomcat)
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration

# Server port (falls nicht gesetzt: default 8081 für auth-service)
server.port=${SERVER_PORT:8081}

# --- JWT / Auth Konfiguration ---
# IMPORTANT: Setze JWT_SECRET in deiner Umgebung (z.B. .env, Render Secrets, Docker Secrets).
# Niemals das Secret in ein öffentliches Repo committen!
jwt.secret=${JWT_SECRET:}
# Access-Token Laufzeit in Millisekunden (default 15 Minuten = 900_000 ms)
jwt.expiration-ms=${JWT_EXPIRATION_MS:900000}
# Refresh-Token Laufzeit in ms (optional, falls implementiert)
jwt.refresh-expiration-ms=${JWT_REFRESH_EXPIRATION_MS:604800000}

# --- CORS / Gateway (falls verwendet) ---
# (Nur relevant wenn auth-service CORS selbst handhabt)
cors.allowed-origins=${GATEWAY_ALLOWED_ORIGINS:http://localhost:4200}

# --- Spring Actuator / Health (Observability) ---
management.endpoints.web.exposure.include=health,info,metrics,env
management.endpoint.health.show-details=always

# --- Logging (optional Standardwerte) ---
logging.level.root=INFO
logging.level.com.toptuna=DEBUG

# --- Datasource (optional) - falls Auth-Service DB nutzt, sonst leer lassen)
# Beispiel (uncomment & set in .env / secrets falls benötigt):
# spring.datasource.url=${AUTH_DB_URL:jdbc:postgresql://localhost:5432/authdb}
# spring.datasource.username=${AUTH_DB_USER:authuser}
# spring.datasource.password=${AUTH_DB_PASSWORD:password}
# spring.jpa.hibernate.ddl-auto=update
# spring.flyway.enabled=true
# spring.flyway.locations=classpath:db/migration

# --- Weitere nützliche Defaults ---
spring.application.name=toptuna-auth-service
