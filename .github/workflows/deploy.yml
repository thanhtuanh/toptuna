name: Deploy TopTuna to Render

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MAVEN_OPTS: "-Dmaven.wagon.http.pool=false"

jobs:
  build-and-test:
    name: Build & Test (backend + frontend)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ------------------------
      # API_BASE (Gateway) setzen
      # ------------------------
      - name: Set API_BASE (from secrets or fallback)
        run: |
          if [ -z "${{ secrets.API_BASE }}" ]; then
            echo "API_BASE=https://toptuna-gateway.onrender.com/api" >> $GITHUB_ENV
            echo "Using fallback API_BASE"
          else
            echo "API_BASE=${{ secrets.API_BASE }}" >> $GITHUB_ENV
            echo "Using secrets.API_BASE"
          fi

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven repository (fallback / extra)
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Run backend unit tests
        working-directory: .
        run: |
          mvn -B -V test

      - name: Package backend (skip tests)
        run: mvn -B -DskipTests package

      # ------------------------
      # Frontend: Node setup (monorepo - lockfile in frontend/)
      # ------------------------
      - name: Set up Node.js 18.x (frontend)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          # Wichtig: auf die Lockfile im frontend-Ordner zeigen
          cache-dependency-path: frontend/package-lock.json

      - name: Ensure frontend package-lock exists
        working-directory: ./frontend
        run: |
          if [ ! -f package-lock.json ]; then
            echo "CI: frontend/package-lock.json not found — generating temporarily"
            npm install --package-lock-only
          else
            echo "CI: frontend/package-lock.json present"
          fi

      - name: Cache frontend node_modules (npm)
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci

      # ------------------------
      # API_BASE in env.template ersetzen
      # ------------------------
      - name: Inject API_BASE into frontend prod env
        working-directory: ${{ github.workspace }}
        run: |
          TEMPLATE="frontend/src/environments/environment.prod.template.ts"
          TARGET="frontend/src/environments/environment.prod.ts"

          if [ -f "$TEMPLATE" ]; then
            echo "Template found: $TEMPLATE"
            sed -i "s|__API_BASE__|$API_BASE|g" "$TEMPLATE"
            mv "$TEMPLATE" "$TARGET"
            echo "Wrote $TARGET with API_BASE=$API_BASE"
          else
            echo "No environment.prod.template.ts found -> skipping injection (ensure your prod env file exists)"
          fi

      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build --if-present

  deploy:
    name: Deploy to Render
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js (deploy step)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Hinweis: Die Render API / Action benötigt API Key + Service ID als Repository Secrets.
      # Erstelle in GitHub: RENDER_API_KEY und RENDER_SERVICE_ID (oder mehrere Deploy-Calls für weitere Services).
      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

      # Optional: wenn du mehrere Render Services einzeln triggern willst, kannst du hier
      # weitere Aufrufe von render-deploy-action mit anderen service-ids hinzufügen.
      # z.B.:
      # - name: Deploy gateway on Render
      #   uses: johnbeynon/render-deploy-action@v0.0.8
      #   with:
      #     service-id: ${{ secrets.RENDER_GATEWAY_SERVICE_ID }}
      #     api-key: ${{ secrets.RENDER_API_KEY }}
