name: Deploy TopTuna to Render

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MAVEN_OPTS: "-Dmaven.wagon.http.pool=false"

jobs:
  build-and-test:
    name: Build & Test (backend + frontend)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'               # built-in maven cache (actions/setup-java v4)

      - name: Cache Maven repository (fallback / extra)
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Run backend unit tests
        working-directory: .
        run: |
          mvn -B -V test
      # Build backend artifacts (skip tests to save time since already ran)
      - name: Package backend (skip tests)
        run: mvn -B -DskipTests package

      - name: Set up Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache frontend node_modules (npm)
        uses: actions/cache@v4
        with:
          # caches npm global cache + project node_modules as fallback
          path: |
            ~/.npm
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Build Frontend
        run: npm run build --if-present
        working-directory: ./frontend

  deploy:
    name: Deploy to Render
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Optional: re-use caches on deploy runner if you plan to build in the workflow before deploy
      - name: Set up Node.js (deploy step)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
