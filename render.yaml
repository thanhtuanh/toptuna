# TopTuna B2B Portal - Render.com Deployment
# Fischgroßhandel für vietnamesische Restaurants

databases:
  - name: toptuna-db
    databaseName: toptuna
    user: toptuna_user
    plan: free
    postgresMajorVersion: 15
    ipAllowList: []

services:
  # Frontend - Angular 17 PWA (DE/VI/EN)
  - type: web
    name: toptuna-frontend
    env: static
    # Build: wir ersetzen vor dem Build den Platzhalter in einer template-Datei
    # (siehe src/environments/environment.prod.template.ts -> __API_BASE__)
    buildCommand: |
      cd frontend
      npm ci
      # Ersetze Platzhalter in environment.prod.template.ts mit Gateway-URL
      # (alternativ: setze hier ${API_BASE} als secret / envVar falls du dynamisch bauen willst)
      sed -i "s|__API_BASE__|https://toptuna-gateway.onrender.com/api|g" src/environments/environment.prod.template.ts || true
      mv src/environments/environment.prod.template.ts src/environments/environment.prod.ts
      npm run build:prod
    staticPublishPath: frontend/dist/toptuna-frontend
    envVars:
      - key: API_BASE
        value: https://toptuna-gateway.onrender.com/api
    routes:
      - type: rewrite
        source: /*
        destination: /index.html
    headers:
      - path: /*
        name: X-Frame-Options
        value: DENY
      - path: /*
        name: X-Content-Type-Options
        value: nosniff

  # Gateway - Spring Cloud Gateway + Security
  - type: web
    name: toptuna-gateway
    env: java
    buildCommand: mvn -f gateway/pom.xml clean package -DskipTests -q
    # Use Render's injected $PORT (don't hardcode)
    startCommand: java -Xmx512m -Dserver.port=$PORT -jar gateway/target/*.jar
    envVars:
      - key: SPRING_PROFILES_ACTIVE
        value: prod
      - key: DATABASE_URL
        fromDatabase:
          name: toptuna-db
          property: connectionString
      - key: AUTH_URL
        value: https://toptuna-auth.onrender.com
      - key: CATALOG_URL
        value: https://toptuna-catalog.onrender.com
      - key: ORDERS_URL
        value: https://toptuna-orders.onrender.com
      - key: LOGISTICS_URL
        value: https://toptuna-logistics.onrender.com
      - key: CRM_URL
        value: https://toptuna-crm.onrender.com
      - key: EXPORT_URL
        value: https://toptuna-export.onrender.com
      - key: GATEWAY_ALLOWED_ORIGINS
        value: https://toptuna-frontend.onrender.com
      - key: JWT_SECRET
        # WICHTIG: Trage hier nicht im Repo ein. Erstelle in Render Dashboard einmalig ein Secret namens "JWT_SECRET"
        # und setze denselben Wert für Auth und Gateway (und evtl. andere Services, die Token verifizieren).
        value: "<SET_IN_RENDER_DASHBOARD:JWT_SECRET>"
    healthCheckPath: /health

  # Auth Service - JWT + Rollen (Admin/Dispo/Fahrer/Kunde)
  - type: web
    name: toptuna-auth
    env: java
    buildCommand: mvn -f auth-service/pom.xml clean package -DskipTests -q
    startCommand: java -Xmx256m -Dserver.port=$PORT -jar auth-service/target/*.jar
    envVars:
      - key: SPRING_PROFILES_ACTIVE
        value: prod
      - key: DATABASE_URL
        fromDatabase:
          name: toptuna-db
          property: connectionString
      - key: JWT_SECRET
        # Bitte denselben Secret-Wert wie im Gateway verwenden
        value: "<SET_IN_RENDER_DASHBOARD:JWT_SECRET>"
    healthCheckPath: /health

  # Catalog Service - Produktkatalog + Staffelpreise
  - type: web
    name: toptuna-catalog
    env: java
    buildCommand: mvn -f catalog-service/pom.xml clean package -DskipTests -q
    startCommand: java -Xmx256m -Dserver.port=$PORT -jar catalog-service/target/*.jar
    envVars:
      - key: SPRING_PROFILES_ACTIVE
        value: prod
      - key: DATABASE_URL
        fromDatabase:
          name: toptuna-db
          property: connectionString
    healthCheckPath: /health

  # Order Service - Warenkorb + Bestellmanagement
  - type: web
    name: toptuna-orders
    env: java
    buildCommand: mvn -f order-service/pom.xml clean package -DskipTests -q
    startCommand: java -Xmx256m -Dserver.port=$PORT -jar order-service/target/*.jar
    envVars:
      - key: SPRING_PROFILES_ACTIVE
        value: prod
      - key: DATABASE_URL
        fromDatabase:
          name: toptuna-db
          property: connectionString
    healthCheckPath: /health

  # Logistics Service - Tour-/Lieferplanung + HACCP
  - type: web
    name: toptuna-logistics
    env: java
    buildCommand: mvn -f logistics-service/pom.xml clean package -DskipTests -q
    startCommand: java -Xmx256m -Dserver.port=$PORT -jar logistics-service/target/*.jar
    envVars:
      - key: SPRING_PROFILES_ACTIVE
        value: prod
      - key: DATABASE_URL
        fromDatabase:
          name: toptuna-db
          property: connectionString
    healthCheckPath: /health

  # CRM Service - Kundendaten + Segmente + Kampagnen
  - type: web
    name: toptuna-crm
    env: java
    buildCommand: mvn -f crm-service/pom.xml clean package -DskipTests -q
    startCommand: java -Xmx256m -Dserver.port=$PORT -jar crm-service/target/*.jar
    envVars:
      - key: SPRING_PROFILES_ACTIVE
        value: prod
      - key: DATABASE_URL
        fromDatabase:
          name: toptuna-db
          property: connectionString
    healthCheckPath: /health

  # Export Service - DATEV/CSV Export
  - type: web
    name: toptuna-export
    env: java
    buildCommand: mvn -f export-service/pom.xml clean package -DskipTests -q
    startCommand: java -Xmx256m -Dserver.port=$PORT -jar export-service/target/*.jar
    envVars:
      - key: SPRING_PROFILES_ACTIVE
        value: prod
      - key: DATABASE_URL
        fromDatabase:
          name: toptuna-db
          property: connectionString
    healthCheckPath: /health
